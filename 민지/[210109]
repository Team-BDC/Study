[MySQL] 개념 정리


*스키마 

: 데이터 베이스 안에 저장되는 데이터 구조, 제약 조건 등을 정의한 것

ex) 학생 :학번, 이름 학년 성별 -> 데이터구조(정적)

            ->학번 : 문자(4자리),  이름 : 문자(최대 10자리), 학년 : 정수(1~4), 성별(문자('남' or '여)) -> 제약 조건(동적)

 

외부 스키마(개별뷰)(여러개) -> 개념 스키마(통합뷰) -> 내부 스키마(저장뷰) -> 데이터베이스(db)

=> 사용자는 외부 스키마를 통해 접근 ! 그리고 위 순서대로 변환이 이루어짐 !

 

<관계형 데이터구조>

  *테이블 = 릴레이션(tuple의 집합)  => 전체 릴레이션의 모음 => 데이터베이스

  *열 : 속성(attribute)

  *행 : tuple(튜플)

  *도메인 : 각 속성이 취할 수 있는 모든 값들의 집합 -> 데이터 값들의 유형과 크기, 범위 지정 

 

 

*primary key : 테이블에서 하나의 row를 고유하게 식별하 수 있도록 해주는 column

<실습>

 

*sql문은 공백, 행 내려가는거 상관 없음 -> 따라서 적절히 사용해서 가독성 높이는 게 좋음 !

 

 

*sql 문의 대소문자 구분 ?

  ->  예약어를 굳이 대문자를 쓰지않아도 작동 되지만, 가독성을 높이기 위해 대문자로 적는 것이 좋음!

 

 

SELECT -> 테이블의 데이터를 조회할 때 사용!, WHERE는 조건! -> AND나 OR로 조건 여러개 가능 !

*OR 주의 할 점 : WHERE id = 1 OR id = 2 를 WHERE id = 1 OR 2 라고 적는 실수 조심할 것!

 

ex) SELECT id, email, age, weight FROM member WHERE weight >= '70';

  * 구간

    BETWEEN 30 AND 39 이런식 ~ -> 30대 조회

    NOT BEETWEEN 30 AND 39 -> 30대 제외하고 조회 !

 

  * 날짜

    SELECT * FROM member WHERE sign_up_day > '2019-01-01'; -> 2019년 1월 1일 이후 가입자 찾고싶은 경우 

    => 얘도 between and 쓸 수 있음 !

    * 연도, 월, 일 추출

      -> YEAR(birthday) = '1992' -> birthday에 있는 날짜에서 YEAR() 함수를 사용하여 연도(1992)만 추출!

      -> MONTH(sign_up_day) IN (6, 7, 8) -> 6,7,8월만 조회

      -> DAYOFMONTH(sign_up_day) BETWEEN 15 AND 31 -> 15일~31일만 조회 

    *날짜 간의 차이

      DATEDIFF(a, b) -> 'a'-'b' = 일 수 -> 오늘 날짜를 기준으로 할 경우, b는 CURDATE()

    *날짜 더하기 빼기

      DATE_ADD(sign_up_day, INTERVAL 300 DAY) -> sign_up_day 기준으로 300일 이후의 날짜

      DATE_SUB(sign_up_day, INTERVAL 300 DAY) -> sign_up_day 기준으로 300일 이전의 날짜

 

  * 문자열

    SELECT * FROM member WHERE address LIKE '서울%'; -> 서울로 시작하는 주소 !

    SELECT * FROM member WHERE address LIKE '%서울%'; -> 서울이 들어간 주소 !

    NOT LIKE -> 제외함 ! 아닌 것만!

  * 같지 않음 ( !=, <> )

  * 이 중에 있는

     WHERE age IN(20, 30) -> 나이가 딱 20살, 또는 30살인 회원들만 조회 !

  * 한 글자를 나타내는 _ 

      LIKE 'c_____@%' -> c로 시작하고 뒤에 다섯글자, 그리고 골뱅이 로 시작하는 문자열 찾음 !

  *이스케이핑 -> 앞에 백슬래시 ! 

    퍼센트 : '%\%%'

    작은따옴표 : '%\'%'

    언더바 : '%\_%'

    큰따옴표 : '%\"%\"%'

 

 

* 오름차순 : ASC  

* 내림차순 : DESC

ex) ORDER BY YEAR(sign_up_day) DESC, email ASC;

     -> 년도로 먼저 내림차순 정렬, 그 후 같은 년도에서 이메일로 오름차순 정렬 !

*WHERE는 반드시 ORDER 앞에 !!

 

*LIMIT

  LIMINT n  -> n번째 row까지 출력 

  LIMINT m, n -> m부터 n개 출력

 

*COUNT(*) -> 전체 row 수

*MAX(), MIN(), AVG() 도 존재함 ! -> AVG는 null 알아서 제거하여 계산함!

 

*IS NULL -> NULL만!

*IS NOT NULL ->NULL아닌 것만 !

*NULL 값 다르게 적고싶으면 ?

  -> COALESCE( height, '####') -> height의 null값들은 #### 이 됨!

*IFNULL

  -> IFNULL(height, 'N/A') -> NULL이면 두 번째 인자, 아니면 해당 값 !

*NULL은 어떤 연산을해도 결국 NULL !

 

*IF 함수

-> IF(height IS NOT NULL, height, 'N/A')

: 조건 식(첫번째인자)의 결과가 TRUE 면 두번 째인자, FALSE면 세번 째 인자! 

 

*CASE 함수

  CASE

    WHEN height IS NOT NULL THEN height

    ELSE 'N/A'

  END

 

*alias를, 같은 SELECT 절 안에서 재사용하지 못한 문제

-> FROM (SELECT *, weight/((height/100) * (height/100)) AS BMI FROM member) AS subquery_for_BMI

->  subquery_for_BMI 를 원래 존재하던 테이블인 것처럼 자유롭게 사용할 수 있어 BMI 단어 자유롭게 사용가능해짐 !

-> 서브쿼리 *******

 

*서브쿼리 -> derived table -> 반드시 alias 붙여줘야 함 !

 

*컬럼끼리 계산 가능 !

*컬럼에 alias 붙이기 -> AS

 

*GROUP BY -> 그루핑

  -> Aggreagate function(집계 함수 : 그루핑을 통해 생성된 각 그룹의 수치적인 특성 구하는 함수) 사용가능 !

      -> COUNT, AVG, MIN -> 그룹별로 구할 수 있음 !

* 그루핑 기준으로 사용되지 않은 컬럼(nonaggregated column)이 SELECT 절에 존재하면 실행 불가 !

 

*HAVING

  -> 그룹 중에서 조건 설정 !

 

 

*SELECT 문 쓰는 순서 

  1. SELECT

  2. FROM

  3. WHERE

  4. GROUP BY

  5. HAVING

  6. ORDER BY

  7. LIMIT

 

*SELECT 문의 실행 순서 (쓴 순서가 아니라 이 순서로 실행됨)

  1. FROM

  2. WHERE

  3. GROUP BY

  4. HAVING

  5. SELECT

  6. ORDER BY

  7. LIMIT

 

*WITH ROLLUP -> 세부그룹들을 좀 더 큰 단위의 그룹으로 중간중간에 합쳐줌 !

 

*GROUPING (GROUP BY 대신)

-> ROLL UP 썼을 때 -> NULL이 실제 NULL인지, 부분 총계를 나타내기 위한 건지 구분 가능 !
